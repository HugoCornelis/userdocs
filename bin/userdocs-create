#!/usr/bin/perl -w
#!/usr/bin/perl -w -d:ptkdb
#


use strict;


use Getopt::Long;

use YAML;
use Data::Dumper;

my $option_verbose;
my $option_tags = [];


#! These are constants for now

my $userdocs_directory = "$ENV{HOME}/neurospaces_project/userdocs/source/snapshots/0";
my $template = "NewDocument";


#
# (document_name)
#
#
#
sub create_new_document
{

  my $documentname = shift;

  my $directory = $documentname;


  my $cwd = `pwd`;

  if ($option_verbose)
  {
    print "$0: entering $userdocs_directory\n";
  }

  chdir "$userdocs_directory";

  mkdir "$documentname";

  chdir "$documentname";

  mkdir "figures";

  mkdir "output";

  system "cp -f $userdocs_directory/$template/$template.tex $documentname.tex";

  system "cp -f $userdocs_directory/$template/figures/* figures";

  #
  # Add the $document to the descriptor yaml file. The user can make it more
  # user readable. Prevents people from making multiple documents show up as 
  # "New Document" in the contents pages.
  #
  my $descriptor = YAML::LoadFile("$userdocs_directory/$template/descriptor.yml");

  $descriptor->{'document name'} = "$documentname";


  YAML::DumpFile("descriptor.yml",$descriptor);
;

  if ($option_verbose)
  {
    print "$0: leaving $userdocs_directory\n";
  }

  chdir "$cwd";

}



sub main
{
    read_cmd_line();

    # get all documents from the command line

    my $documents
	= {
	   map
	   {
	       $_ => 1,
	   }
	   @ARGV,
	  };

 

    # make sure document names are 'compliant'

    map
    {
	s(/$)();
    }
	keys %$documents;


    if (!scalar keys %$documents)
    {
	print "$0: no documents to build\n";
    }

    foreach my $document (keys %$documents)
    {
	create_new_document($document);
    }
}


sub read_cmd_line
{
    my $option_help = 0;
    my $option_version;

    my $result
	= GetOptions(
		     "help!" => \$option_help,
		     "verbose+" => \$option_verbose,
		     "version" => \$option_version,
		    );

    if (!$result)
    {
	die "$0: *** Error: Error in option processing";
    }

    if ($option_version)
    {
    }

    # reporting options

    if ($option_help)
    {
	$0 =~ m(.*/(.*));

	my $program_name = $1;

	print
	    "

$program_name: Creates a new blank document for editing using the hardcoded 
template file.  Arguments on the command line are taken as documents
that need to be given a blank template.


options:
    --help            print usage information.
    --version         give version information.
    --v|verbose       tell what is being done, specify multiple times to get more feedback.

";

	exit 1;
    }

}


main();


