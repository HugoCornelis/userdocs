#!/usr/bin/perl -w
#!/usr/bin/perl -w -d:ptkdb
#


use strict;


BEGIN
{
    #! make check

    push @INC, '../perl';

    #! make distcheck

    push @INC, '../../perl';

    #! normal run

    push @INC, './perl';

    #! after install

    push @INC, '/usr/local/glue/swig/perl';
}


use GENESIS3::Documentation;

use Getopt::Long;

use YAML;


$SIG{__DIE__}
    = sub {

	GENESIS3::Documentation::Publications::publish_production_results();

	use Carp;

	confess @_;
    };


$SIG{INT}
    = sub {
	use Carp;

	confess @_;

	exit 1;
    };

$0 =~ m(.*/(.*));

my $program_name = $1;

$program_name =~ m((.*?)-(.*));

my $documentation_set_name = $1;
my $root_operation_name = $2;

my $option_check;
my $option_dry_run;
my $option_email = [];
my $option_parse_only = 0;
my $option_regex = ".*";
my $option_report_output;
my $option_report_tags;
my $option_set_name = $documentation_set_name || "userdocs";
my $option_tags = [];
my $option_verbose;



sub main
{
    read_cmd_line();

    # switch to the build directory

    my $build_directory = "$ENV{HOME}/neurospaces_project/$option_set_name/source/snapshots/0/";

    if (!chdir $build_directory)
    {
	die "$0: cannot change to the build directory ($build_directory)";
    }

    # get all documents from the command line

    my $documents
	= GENESIS3::Documentation::find_documentation
	    (
	     {
	      (@ARGV ? (names => [ @ARGV, ]) : ()),
	      tags => $option_tags,
	     },
	    );

    if ($option_dry_run)
    {
	print Dump( { all_documents => $documents, }, );
    }
    else
    {
	# start the publication process

	GENESIS3::Documentation::Publications::start_publication_production();

	# prepare directory structure

	`mkdir -p html/htdocs/neurospaces_project/$option_set_name/`;

	# loop over all documents to be build

	if (!scalar keys %$documents)
	{
	    print "$0: no documents to build\n";
	}

	if (scalar keys %$documents > 1)
	{
	    if (scalar @$option_email)
	    {
		print STDERR "$0: *** Warning: not sending multiple documents to multiple email addresses to prevent email overload";

		$option_email = [];
	    }
	}

	foreach my $document_name (sort keys %$documents)
	{
	    $document_name =~ s(/$)();

	    $document_name =~ s(.*/)();

	    chomp $document_name;

	    if ($document_name !~ m/$option_regex/)
	    {
		next;
	    }

	    my $document
		= GENESIS3::Documentation::Document->new
		    (
		     {
		      name => $document_name,
		     },
		    );

# 	    # if we are doing a regular build

# 	    if (not scalar @$option_report_tags)
	    {
		# loop over all documentation operations

		my $operation_result = {};

		my $operations
		    = [
		       $option_report_tags
		       ? 'read_descriptor'
		       : (
			  $option_check
			  ? 'check'
			  : qw(read_descriptor
			       copy
			       expand
			       compile
			       publish
			     )
			 )
		      ];

		if (scalar @$option_email)
		{
		    push @$operations, "email";

		    $document->{email_adresses} = $option_email;
		}

		foreach my $operation (@$operations)
		{
		    # execute the operation

		    my $error
			= $document->$operation
			    (
			     {
			      verbose => $option_verbose,
			      set_name => $option_set_name,
			     },
			    );

		    if ($error)
		    {
			$operation_result->{"${operation}_error"} = $error;

			print "$0: *** Error: for document $document_name: $operation operation failed ($error)\n";

			last;
		    }
		}

# 		if (scalar %$operation_result)
		{
		    GENESIS3::Documentation::Publications::insert_publication_production_result
			    (
			     $document,
			     $operation_result,
			    );
		}
	    }
	}

	# if we are reporting tags

	if ($option_report_tags)
	{
	    # extract and report the tags from the operation_result

	    my $all_processed_tags = GENESIS3::Documentation::Publications::extract_processed_tags();

	    use YAML;

	    print Dump( { all_processed_tags => $all_processed_tags, }, );

	}

	if (!$option_report_tags)
	{
	    # process other output options

	    if ($option_report_output)
	    {
		my $all_output = GENESIS3::Documentation::Publications::report_all_output();

		use YAML;

		print Dump( { all_output => $all_output, }, );
	    }

	    # now also publish the publication production results

	    GENESIS3::Documentation::Publications::publish_production_results();
	}
    }
}


sub read_cmd_line
{
    my $option_help = 0;
    my $option_version;

    my $result
	= GetOptions
	    (
	     "check!" => \$option_check,
	     "dry-run!" => \$option_dry_run,
	     "email=s" => $option_email,
	     "help!" => \$option_help,
	     "parse-only!" => \$option_parse_only,
	     "regex=s" => \$option_regex,
	     "report-output!" => \$option_report_output,
	     "report-tags!" => \$option_report_tags,
	     "set-name=s" => \$option_set_name,
	     "tags=s" => $option_tags,
	     "verbose+" => \$option_verbose,
	     "version" => \$option_version,
	    );

    if (!$result)
    {
	die "$0: *** Error: Error in option processing";
    }

    if ($option_version)
    {
    }

    # reporting options

    if ($option_help)
    {
	print
	    "

$program_name: build documentation and prepare them for web
publication.  Arguments on the command line are taken as documents
that need to be build.  If no arguments are given, all documents will
be build.

synopsis:
    $0 <document name1> <document name2> ...

options:
    --check           check documentation filesystem correctness.
    --dry-run         print what documents would be build without actually building them.
    --email           send the built document to this email address, repeat for each receiver.
                      NOTE: see http://www.amirwatad.com/blog/archives/2009/03/21/send-email-from-the-command-line-using-gmail-account/ as an example of a local configuration of your MTA.
    --help            print usage information.
    --parse-only      only execute parse commands, without actually building documentation.
    --regex           selects documents by name (default is all).
    --report-output   report what output has been generated.
    --report-tags     report the tags associated with the selected documents instead of building the documents.
    --set-name        select a document set (builtin default is userdocs).
    --tags            process the documents with these tags, multiple tags options may be given.
    --version         give version information.
    --v|verbose       tell what is being done, specify multiple times to get more feedback.

example usage:
    $0 documentation-homepage
    firefox html/htdocs/neurospaces_project/$option_set_name/documentation-homepage/documentation-homepage.html

";

	exit 0;
    }

}


main();


