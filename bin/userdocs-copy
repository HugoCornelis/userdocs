#!/usr/bin/perl -w
#!/usr/bin/perl -w -d:ptkdb
#


use strict;


use Getopt::Long;

use YAML;


my $option_verbose;
my $option_tags = [];


sub copy_document
{
    my $document = shift;

#     $document = m((.*)/(.*));

    my $directory = $document;

#     my $filename = $2;

    if ($option_verbose)
    {
	print "$0: entering $directory\n";
    }

    chdir $directory;

    # if we find a makefile

    if (-f 'Makefile')
    {
	# that is what we use

	system "make copy_document";
    }
    else
    {
	# find relevant source files

	my $filenames
	    = [
	       map
	       {
		   chomp; $_
	       }
	       `ls *.tex`,
	      ];

	# loop over source files

	foreach my $filename (@$filenames)
	{
	    # for latex sources

	    if ($filename =~ /\.tex$/)
	    {
		# create workspace directories for generating output

		mkdir "output";
		mkdir 'output/figures';

		# copy source files

		system "cp $filename output/";

		if(-d "figures" && -e "figures/*")
		{

		  system "cp -rp figures/* output/figures/";

		}

	    }

	    # else unknown source file type

	    else
	    {
		print "$0: unknown file type for $filename";
	    }
	}
    }

    if ($option_verbose)
    {
	print "$0: leaving $directory\n";
    }

    chdir '..';
}


sub main
{
    read_cmd_line();

    # get all documents from the command line

    my $documents
	= {
	   map
	   {
	       $_ => 1,
	   }
	   @ARGV,
	  };

    # get all documents selected by tags

    foreach my $tag (@$option_tags)
    {
	local $/;

	my $documents_tag = Load(`userdocs-tag-filter 2>&1 "$tag" "published"`);

	if (!scalar @$documents_tag)
	{
	    next;
	}
	
	$documents
	    = {
	       %$documents,
	       map
	       {
		   $_ => 1,
	       }
	       @{ $documents_tag  },
	      };
    }

    # make sure document names are 'compliant'

    map
    {
	s(/$)();
    }
	keys %$documents;

    # prepare directory structure

    `mkdir -p html/htdocs/neurospaces_project/userdocs/`;

    if (!scalar keys %$documents)
    {
	print "$0: no documents to build\n";
    }

    foreach my $document (keys %$documents)
    {
	copy_document($document);
    }
}


sub read_cmd_line
{
    my $option_help = 0;
    my $option_version;

    my $result
	= GetOptions(
		     "help!" => \$option_help,
		     "tags=s" => $option_tags,
		     "verbose+" => \$option_verbose,
		     "version" => \$option_version,
		    );

    if (!$result)
    {
	die "$0: *** Error: Error in option processing";
    }

    if ($option_version)
    {
    }

    # reporting options

    if ($option_help)
    {
	$0 =~ m(.*/(.*));

	my $program_name = $1;

	print
	    "

$program_name: build documentation and prepare them for web
publication.  Arguments on the command line are taken as documents
that need to be build.  If no arguments are given, all documents will
be build.

options:
    --help            print usage information.
    --tags            process the documents with these tags, multiple tags options may be given.
    --version         give version information.
    --v|verbose       tell what is being done, specify multiple times to get more feedback.

";

	exit 1;
    }

}


main();


