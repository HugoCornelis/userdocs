#!/usr/bin/env python
"""
Creates a frame with a toolbar that holds a G-3 graph (2D y vs. x plot).
The graph allows multiple plots from multicolumn data "x, y1, y2, ..."
given at successive x-values.  The data to be plotted is represented as a
list of lists, as would be generated by the G-3 live_output option.

Running this as a main program generates a test plot of sin and cos
data vs. time. The frame and graph are created from the class Xgraph
defined here.

Code adapted from gtube/plot/__init__.py used for the g3plot utility

"""
import os
import pdb
import sys

# Used to guarantee to use at least Wx2.8
# import wxversion
# wxversion.ensureMinimal('2.8')

import matplotlib

# 
#matplotlib.use('WXAgg')

from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.backends.backend_wxagg import NavigationToolbar2WxAgg

from matplotlib.backends.backend_wx import _load_bitmap
from matplotlib.figure import Figure
from numpy.random import rand

import wx

#----------------------------------------------------------------------

class MyNavigationToolbar(NavigationToolbar2WxAgg):
    """
    Extend the default wx toolbar with your own event handlers
    """
    ON_CUSTOM = wx.NewId()
    def __init__(self, canvas, cankill):
        NavigationToolbar2WxAgg.__init__(self, canvas)

        # for simplicity I'm going to reuse a bitmap from wx, you'll
        # probably want to add your own.
        self.AddSimpleTool(self.ON_CUSTOM, _load_bitmap('stock_left.xpm'),
                           'Click me', 'Activate custom contol')
        wx.EVT_TOOL(self, self.ON_CUSTOM, self._on_custom)

#----------------------------------------------------------------------

    def _on_custom(self, evt):
        # add some text to the axes in a random location in axes (0,1)
        # coords) with a random color

        # get the axes
        ax = self.canvas.figure.axes[0]

        # generate a random location can color
        x,y = tuple(rand(2))
        rgb = tuple(rand(3))

        # add the text and draw
        ax.text(x, y, 'You clicked me',
                transform=ax.transAxes,
                color=rgb)
        self.canvas.draw()
        evt.Skip()


#*********************** Start Xgraph class definition *************************
class Xgraph(wx.Frame):

    def __init__(self, verbose=False,
                 title='(x,y) data', formt='k',
                 xlabel='X', ylabel='Y',
                 ymin=-0.1, ymax=0.5,
                 xmin=None, xmax=None,
                 pos=(300, 0), size=(640, 640)):
        
        wx.Frame.__init__(self, None, -1, "G3 Plot", pos, size)

        self.SetBackgroundColour(wx.NamedColor("WHITE"))

        self.verbose = verbose

        self.panel = None
        self.dpi = None
        self.fig = None
        self.canvas = None
        self.axes = None
        self.toolbar = None

        # if False, clear the graph on Reset
        self.overlay = False

        # Just in case we need to have these values stored
        self.title = title
        self.formt = formt
        self.xlabel = xlabel
        self.ylabel = ylabel
        self.ymin = ymin
        self.ymax = ymax
        self.xmin = xmin
        self.xmax = xmax
        self.subplot = []

        self.figure = Figure(figsize=(5,4), dpi=100)
        
        # (111) == (1,1,1) --> row 1, col 1, Figure 1)
        self.axes = self.figure.add_subplot(1,1,1)

        self.axes.set_title(self.title)
        self.axes.set_xlabel(self.xlabel)
        self.axes.set_ylabel(self.ylabel)
        
        self.canvas = FigureCanvas(self, -1, self.figure)

        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer.Add(self.canvas, 1, wx.TOP | wx.LEFT | wx.EXPAND)
        # Capture the paint message
        wx.EVT_PAINT(self, self.OnPaint)

        self.toolbar = MyNavigationToolbar(self.canvas, True)
        self.toolbar.Realize()
        if wx.Platform == '__WXMAC__':
            # Mac platform (OSX 10.3, MacPython) does not seem to cope with
            # having a toolbar in a sizer. This work-around gets the buttons
            # back, but at the expense of having the toolbar at the top
            self.SetToolBar(self.toolbar)
        else:
            # On Windows platform, default window size is incorrect, so set
            # toolbar width to figure width.
            tw, th = self.toolbar.GetSizeTuple()
            fw, fh = self.canvas.GetSizeTuple()
            # By adding toolbar in sizer, we are able to put it at the bottom
            # of the frame - so appearance is closer to GTK version.
            # As noted above, doesn't work for Mac.
            self.toolbar.SetSize(wx.Size(fw, th))
            self.sizer.Add(self.toolbar, 0, wx.LEFT | wx.EXPAND)

        # update the axes menu on the toolbar
        self.toolbar.update()
        self.SetSizer(self.sizer)
        self.Fit()

    #*********************** Start PlotData method *************************

    def PlotData(self, data_list):
        """
        Parses and plots the data.

        """
        
        # Will end up being a list of lists. First item
        # of the list will be the time step, all following
        # items will be output data at each time step.

        num_items = None
        plot_data = None
        for line in data_list:
            if plot_data is None:
                # print 'line :', line
                num_items = len(line)
                plot_data = [[] for i in range(num_items)]

            for indx, d in enumerate(line):
                # print 'indx, d :', indx, d
                if indx < num_items:
                    try:
                        plot_data[indx].append(d)
                    except IndexError, e:
                        print "Error processing data line for index %d" % indx

        # Now we plot all of the data we collected.
        t = plot_data[0]  # This is the time, or x-coordinate value

        for indx, y in enumerate(plot_data[1:]):
                if self.verbose:
                    num_plots = len(plot_data[1:])
                    print "\tPlotting data set %d of %d" % (indx+1, num_plots)
                self._AddSubplot(t, y)
                # print 't, y: ', t, y

    #*********************** End PlotData method ***************************

    def _AddSubplot(self, t, x):
        """
        (111) == (1,1,1) --> row 1, col 1, Figure 1

        """
        
        if self.axes is None:

            self.axes = self.figure.add_subplot(1,1,1)
            self.axes.set_title(self.title)
            self.axes.set_xlabel(self.xlabel)
            self.axes.set_ylabel(self.ylabel)
            
        self.axes.plot(t, x)

        self.canvas.draw()


    def Reset(self):
        if self.overlay == False:
            self.axes.clear()
	self.canvas.draw()
        

    #----------------------------------------------------------------

    def OnPaint(self, event):
        self.canvas.draw()
        event.Skip()


#*********************** End Xgraph class definition *************************

class MyApp(wx.App):
    def OnInit(self):
        from math import sin, cos, pi # For demo data
        # Generate some data to plot, put it in a 2-D array with columns t, y1, y2
	dt = 0.01
        tmax = 3.0
        fakedata=[]
        for i in range(0, int(tmax/dt)+1):
            x = i*dt
            y1 = sin(2*pi*x)
            y2 = cos(2*pi*x)
            fakedata.append([x, y1, y2])
        # print fakedata
        frame = Xgraph(title='GENESIS 3 Plot', verbose = True)
        frame.PlotData(fakedata)
        frame.Show()
        self.SetTopWindow(frame)
        return True

if __name__ == '__main__':
    app = MyApp(False)
    app.MainLoop()

